// auto-generated by xpiler

using System;
using System.Collections.Generic;
using System.Text;

using x2;

namespace x2.Events
{
    public class FlowStart : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        static FlowStart()
        {
            tag = new Tag(Event.tag, typeof(FlowStart), 0,
                    (int)BuiltInType.FlowStart);
        }

        new public static FlowStart New()
        {
            return new FlowStart();
        }

        public FlowStart()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected FlowStart(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            return true;
        }

        public override void Deserialize(Serializer serializer)
        {
            base.Deserialize(serializer);
        }

        public override void Deserialize(VerboseDeserializer verboseDeserializer)
        {
            base.Deserialize(verboseDeserializer);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
        }

        public override void Serialize(VerboseSerializer verboseSerializer)
        {
            base.Serialize(verboseSerializer);
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }

        private void Initialize()
        {
        }
    }

    public class FlowStop : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        static FlowStop()
        {
            tag = new Tag(Event.tag, typeof(FlowStop), 0,
                    (int)BuiltInType.FlowStop);
        }

        new public static FlowStop New()
        {
            return new FlowStop();
        }

        public FlowStop()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected FlowStop(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            return true;
        }

        public override void Deserialize(Serializer serializer)
        {
            base.Deserialize(serializer);
        }

        public override void Deserialize(VerboseDeserializer verboseDeserializer)
        {
            base.Deserialize(verboseDeserializer);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
        }

        public override void Serialize(VerboseSerializer verboseSerializer)
        {
            base.Serialize(verboseSerializer);
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }

        private void Initialize()
        {
        }
    }
}
