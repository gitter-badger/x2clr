// auto-generated by xpiler

using System;
using System.Text;

using x2;

namespace x2.Links.SocketLink
{
    public static class SocketLinkEventType
    {
        public const int HandshakeReq = -10;
        public const int HandshakeResp = -11;
        public const int HandshakeAck = -12;
        public const int KeepaliveEvent = -20;
        public const int KeepaliveTick = -21;
        public const int SessionReq = -30;
        public const int SessionResp = -31;
        public const int SessionAck = -32;

        private static ConstsInfo<int> info;

        static SocketLinkEventType()
        {
            info = new ConstsInfo<int>();
            info.Add("HandshakeReq", -10);
            info.Add("HandshakeResp", -11);
            info.Add("HandshakeAck", -12);
            info.Add("KeepaliveEvent", -20);
            info.Add("KeepaliveTick", -21);
            info.Add("SessionReq", -30);
            info.Add("SessionResp", -31);
            info.Add("SessionAck", -32);
        }

        public static string GetName(int value)
        {
            return info.GetName(value);
        }

        public static int Parse(string name)
        {
            return info.Parse(name);
        }

        public static bool TryParse(string name, out int result)
        {
            return info.TryParse(name, out result);
        }

    }

    public class HandshakeReq : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private byte[] data_;

        public byte[] Data
        {
            get { return data_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                data_ = value;
            }
        }

        static HandshakeReq()
        {
            tag = new Tag(Event.tag, typeof(HandshakeReq), 1,
                    (int)SocketLinkEventType.HandshakeReq);
        }

        new public static HandshakeReq New()
        {
            return new HandshakeReq();
        }

        public HandshakeReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected HandshakeReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            HandshakeReq o = (HandshakeReq)other;
            if (data_ != o.data_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(data_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            HandshakeReq o = (HandshakeReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (data_ != o.data_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Serializer serializer)
        {
            base.Deserialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Read(out data_);
            }
        }



        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(data_);
            }
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(data_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Data={0}", data_);
        }

        private void Initialize()
        {
            data_ = null;
        }
    }

    public class HandshakeResp : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private byte[] data_;

        public byte[] Data
        {
            get { return data_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                data_ = value;
            }
        }

        static HandshakeResp()
        {
            tag = new Tag(Event.tag, typeof(HandshakeResp), 1,
                    (int)SocketLinkEventType.HandshakeResp);
        }

        new public static HandshakeResp New()
        {
            return new HandshakeResp();
        }

        public HandshakeResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected HandshakeResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            HandshakeResp o = (HandshakeResp)other;
            if (data_ != o.data_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(data_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            HandshakeResp o = (HandshakeResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (data_ != o.data_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Serializer serializer)
        {
            base.Deserialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Read(out data_);
            }
        }



        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(data_);
            }
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(data_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Data={0}", data_);
        }

        private void Initialize()
        {
            data_ = null;
        }
    }

    public class HandshakeAck : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private bool result_;

        public bool Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                result_ = value;
            }
        }

        static HandshakeAck()
        {
            tag = new Tag(Event.tag, typeof(HandshakeAck), 1,
                    (int)SocketLinkEventType.HandshakeAck);
        }

        new public static HandshakeAck New()
        {
            return new HandshakeAck();
        }

        public HandshakeAck()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected HandshakeAck(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            HandshakeAck o = (HandshakeAck)other;
            if (result_ != o.result_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(result_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            HandshakeAck o = (HandshakeAck)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Serializer serializer)
        {
            base.Deserialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Read(out result_);
            }
        }



        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(result_);
            }
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(result_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Result={0}", result_);
        }

        private void Initialize()
        {
            result_ = false;
        }
    }

    public class KeepaliveEvent : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        static KeepaliveEvent()
        {
            tag = new Tag(Event.tag, typeof(KeepaliveEvent), 0,
                    (int)SocketLinkEventType.KeepaliveEvent);
        }

        new public static KeepaliveEvent New()
        {
            return new KeepaliveEvent();
        }

        public KeepaliveEvent()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected KeepaliveEvent(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            return true;
        }

        public override void Deserialize(Serializer serializer)
        {
            base.Deserialize(serializer);
        }



        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }

        private void Initialize()
        {
        }
    }

    public class KeepaliveTick : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string linkName_;

        public string LinkName
        {
            get { return linkName_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                linkName_ = value;
            }
        }

        static KeepaliveTick()
        {
            tag = new Tag(Event.tag, typeof(KeepaliveTick), 1,
                    (int)SocketLinkEventType.KeepaliveTick);
        }

        new public static KeepaliveTick New()
        {
            return new KeepaliveTick();
        }

        public KeepaliveTick()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected KeepaliveTick(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            KeepaliveTick o = (KeepaliveTick)other;
            if (linkName_ != o.linkName_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(linkName_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            KeepaliveTick o = (KeepaliveTick)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (linkName_ != o.linkName_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Serializer serializer)
        {
            base.Deserialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Read(out linkName_);
            }
        }



        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(linkName_);
            }
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(linkName_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" LinkName=\"{0}\"", linkName_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            linkName_ = "";
        }
    }

    public class SessionReq : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string value_;

        public string Value
        {
            get { return value_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                value_ = value;
            }
        }

        static SessionReq()
        {
            tag = new Tag(Event.tag, typeof(SessionReq), 1,
                    (int)SocketLinkEventType.SessionReq);
        }

        new public static SessionReq New()
        {
            return new SessionReq();
        }

        public SessionReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected SessionReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            SessionReq o = (SessionReq)other;
            if (value_ != o.value_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(value_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            SessionReq o = (SessionReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (value_ != o.value_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Serializer serializer)
        {
            base.Deserialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Read(out value_);
            }
        }



        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(value_);
            }
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(value_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Value=\"{0}\"", value_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            value_ = "";
        }
    }

    public class SessionResp : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string value_;

        public string Value
        {
            get { return value_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                value_ = value;
            }
        }

        static SessionResp()
        {
            tag = new Tag(Event.tag, typeof(SessionResp), 1,
                    (int)SocketLinkEventType.SessionResp);
        }

        new public static SessionResp New()
        {
            return new SessionResp();
        }

        public SessionResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected SessionResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            SessionResp o = (SessionResp)other;
            if (value_ != o.value_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(value_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            SessionResp o = (SessionResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (value_ != o.value_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Serializer serializer)
        {
            base.Deserialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Read(out value_);
            }
        }



        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(value_);
            }
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(value_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Value=\"{0}\"", value_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            value_ = "";
        }
    }

    public class SessionAck : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        static SessionAck()
        {
            tag = new Tag(Event.tag, typeof(SessionAck), 0,
                    (int)SocketLinkEventType.SessionAck);
        }

        new public static SessionAck New()
        {
            return new SessionAck();
        }

        public SessionAck()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected SessionAck(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            return true;
        }

        public override void Deserialize(Serializer serializer)
        {
            base.Deserialize(serializer);
        }



        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }

        private void Initialize()
        {
        }
    }
}
