// Copyright (c) 2013 Jae-jun Kang
// See the file COPYING for license details.

using System;
using System.Collections.Generic;
using System.IO;

namespace x2.xpiler {
  class CSharpFormatter : IFormatter {
    private const string Extension = ".cs";

    private static readonly Dictionary<string, string> nativeTypes;

    public string Description {
      get { return "C#"; }
    }

    static CSharpFormatter() {
      nativeTypes = new Dictionary<string, string>();

      nativeTypes.Add("int8", "sbyte");
      nativeTypes.Add("int16", "short");
      nativeTypes.Add("int32", "int");
      nativeTypes.Add("int64", "long");

      nativeTypes.Add("string", "string");
    }

    public bool IsUpToDate(Document doc) {
      string target = Path.Combine(doc.DirName, doc.BaseName + Extension);
      return (File.Exists(target) &&
              File.GetLastWriteTime(target) >= File.GetLastWriteTime(doc.Path));
    }

    public bool Format(Document doc) {
      try {
        string target = Path.Combine(doc.DirName, doc.BaseName + Extension);
        using (StreamWriter file = new StreamWriter(target)) {
          file.WriteLine("// auto-generated by xpiler");
        }
      } catch (Exception e) {
        Console.Error.WriteLine(e.Message);
        return false;
      }
      return true;
    }
  }
}
