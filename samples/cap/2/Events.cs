// auto-generated by xpiler

using System;
using System.Text;

using x2;

namespace x2.Samples.Capitalizer
{
    public class CapitalizeReq : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string message_;

        public string Message
        {
            get { return message_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                message_ = value;
            }
        }

        static CapitalizeReq()
        {
            tag = new Tag(Event.tag, typeof(CapitalizeReq), 1,
                    1);
        }

        public CapitalizeReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected CapitalizeReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            CapitalizeReq o = (CapitalizeReq)other;
            if (message_ != o.message_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(message_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            CapitalizeReq o = (CapitalizeReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (message_ != o.message_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Load(x2.Buffer buffer)
        {
            base.Load(buffer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                buffer.Read(out message_);
            }
        }

        public override void Serialize(x2.Buffer buffer)
        {
            buffer.WriteUInt29(tag.TypeId);
            this.Dump(buffer);
        }

        protected override void Dump(x2.Buffer buffer)
        {
            base.Dump(buffer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                buffer.Write(message_);
            }
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Message=\"{0}\"", message_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            message_ = "";
        }
    }

    public class CapitalizeResp : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string result_;

        public string Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                result_ = value;
            }
        }

        static CapitalizeResp()
        {
            tag = new Tag(Event.tag, typeof(CapitalizeResp), 1,
                    2);
        }

        public CapitalizeResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected CapitalizeResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            CapitalizeResp o = (CapitalizeResp)other;
            if (result_ != o.result_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(result_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            CapitalizeResp o = (CapitalizeResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Load(x2.Buffer buffer)
        {
            base.Load(buffer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                buffer.Read(out result_);
            }
        }

        public override void Serialize(x2.Buffer buffer)
        {
            buffer.WriteUInt29(tag.TypeId);
            this.Dump(buffer);
        }

        protected override void Dump(x2.Buffer buffer)
        {
            base.Dump(buffer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                buffer.Write(result_);
            }
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Result=\"{0}\"", result_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            result_ = "";
        }
    }
}
